// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length

/// User-configurable options for the `GetRouteRange` operation.
public struct GetRouteRangeOptions: RequestOptions {
    /// Fuel budget in liters that determines maximal range which can be travelled using the specified Combustion Consumption Model.<br> When fuelBudgetInLiters is used, it is mandatory to specify a detailed  Combustion Consumption Model.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    public let fuelBudgetInLiters: Double?
    /// Electric energy budget in kilowatt hours (kWh) that determines maximal range which can be travelled using the specified Electric Consumption Model.<br> When energyBudgetInkWh is used, it is mandatory to specify a detailed Electric Consumption Model.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    public let energyBudgetInKwH: Double?
    /// Time budget in seconds that determines maximal range which can be travelled using driving time. The Consumption Model will only affect the range when routeType is eco.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    public let timeBudgetInSec: Double?
    /// Distance budget in meters that determines maximal range which can be travelled using driving distance.  The Consumption Model will only affect the range when routeType is eco.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    public let distanceBudgetInMeters: Double?
    /// The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).
    public let departAt: Iso8601Date?
    /// The type of route requested.
    public let routeType: RouteType?
    /// Possible values:
    ///   * true - Do consider all available traffic information during routing
    ///   * false - Ignore current traffic data during routing. Note that although the current traffic data is ignored
    ///   during routing, the effect of historic traffic on effective road speeds is still incorporated.
    public let useTrafficData: Bool?
    /// Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times in one request, for example, '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the value alreadyUsedRoads must not be used.
    public let avoid: [RouteAvoidType]?
    /// The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
    public let travelMode: TravelMode?
    /// Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
    public let inclineLevel: InclineLevel?
    /// Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
    public let windingness: WindingnessLevel?
    /// Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.
    public let vehicleAxleWeight: Int32?
    /// Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.
    public let vehicleWidth: Double?
    /// Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.
    public let vehicleHeight: Double?
    /// Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.
    public let vehicleLength: Double?
    /// Maximum speed of the vehicle in km/hour. The max speed in the vehicle profile is used to check whether a vehicle is allowed on motorways.
    /// * A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning.
    /// * A non-zero value may be overridden during route planning. For example, the current traffic flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will again use 60 km/hour.
    public let vehicleMaxSpeed: Int32?
    /// Weight of the vehicle in kilograms.
    /// * It is mandatory if any of the *Efficiency parameters are set.
    /// * It must be strictly positive when used in the context of the Consumption Model. Weight restrictions are considered.
    /// * If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-zero, then weight restrictions are considered.
    /// * In all other cases, this parameter is ignored.
    /// Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900
    public let vehicleWeight: Int32?
    /// Whether the vehicle is used for commercial purposes. Commercial vehicles may not be allowed to drive on some roads.
    public let isCommercialVehicle: Bool?
    /// Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
    public let vehicleLoadType: VehicleLoadType?
    /// Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.
    public let vehicleEngineType: VehicleEngineType?
    /// Specifies the speed-dependent component of consumption.
    /// Provided as an unordered list of colon-delimited speed & consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:
    ///  * by linear interpolation, if the given speed lies in between two speeds in the list
    ///  * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list
    /// The list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.
    /// Consumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.
    /// Similarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller speed.
    /// The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.
    /// Sensible Values : 50,6.3:130,11.5
    /// **Note** : This parameter is required for **The Combustion Consumption Model**.
    public let constantSpeedConsumptionInLitersPerHundredKm: String?
    /// Specifies the current supply of fuel in liters.
    /// Sensible Values : 55
    public let currentFuelInLiters: Double?
    /// Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
    /// It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.
    /// Sensible Values : 0.2
    public let auxiliaryPowerInLitersPerHour: Double?
    /// Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.
    /// This parameter is required if any ***Efficiency** parameter is set.
    /// Sensible Values : 34.2
    public let fuelEnergyDensityInMegajoulesPerLiter: Double?
    /// Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates _(i.e. KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **decelerationEfficiency**.
    /// The range of values allowed are 0.0 to 1/**decelerationEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66
    public let accelerationEfficiency: Double?
    /// Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates _(i.e. ChemicalEnergySaved/KineticEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **accelerationEfficiency**.
    /// The range of values allowed are 0.0 to 1/**accelerationEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91
    public let decelerationEfficiency: Double?
    /// Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation _(i.e. PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **downhillEfficiency**.
    /// The range of values allowed are 0.0 to 1/**downhillEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74
    public let uphillEfficiency: Double?
    /// Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation _(i.e. ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **uphillEfficiency**.
    /// The range of values allowed are 0.0 to 1/**uphillEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73
    public let downhillEfficiency: Double?
    /// Specifies the speed-dependent component of consumption.
    /// Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:
    /// * by linear interpolation, if the given speed lies in between two speeds in the list
    /// * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list
    /// The list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.
    /// Consumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.
    /// Similarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller  speed.
    /// The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and 100000.0.
    /// Sensible Values : 50,8.2:130,21.3
    /// This parameter is required for **Electric consumption model**.
    public let constantSpeedConsumptionInKwHPerHundredKm: String?
    /// Specifies the current electric energy supply in kilowatt hours (kWh).
    /// This parameter co-exists with **maxChargeInkWh** parameter.
    /// The range of values allowed are 0.0 to **maxChargeInkWh**.
    /// Sensible Values : 43
    public let currentChargeInKwH: Double?
    /// Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.
    /// This parameter co-exists with **currentChargeInkWh** parameter.
    /// Minimum value has to be greater than or equal to **currentChargeInkWh**.
    /// Sensible Values : 85
    public let maxChargeInKwH: Double?
    /// Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts (kW).
    /// It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.
    /// Sensible Values : 1.7
    public let auxiliaryPowerInKw: Double?

    /// A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    /// Highly recommended for correlating client-side activites with requests received by the server.
    public let clientRequestId: String?

    /// A token used to make a best-effort attempt at canceling a request.
    public let cancellationToken: CancellationToken?

    /// A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    public var dispatchQueue: DispatchQueue?

    /// A `PipelineContext` object to associate with the request.
    public var context: PipelineContext?

    /// Initialize a `GetRouteRangeOptions` structure.
    /// - Parameters:
    ///   - fuelBudgetInLiters: Fuel budget in liters that determines maximal range which can be travelled using the specified Combustion Consumption Model.<br> When fuelBudgetInLiters is used, it is mandatory to specify a detailed  Combustion Consumption Model.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    ///   - energyBudgetInKwH: Electric energy budget in kilowatt hours (kWh) that determines maximal range which can be travelled using the specified Electric Consumption Model.<br> When energyBudgetInkWh is used, it is mandatory to specify a detailed Electric Consumption Model.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    ///   - timeBudgetInSec: Time budget in seconds that determines maximal range which can be travelled using driving time. The Consumption Model will only affect the range when routeType is eco.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    ///   - distanceBudgetInMeters: Distance budget in meters that determines maximal range which can be travelled using driving distance.  The Consumption Model will only affect the range when routeType is eco.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
    ///   - departAt: The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).
    ///   - routeType: The type of route requested.
    ///   - useTrafficData: Possible values:
    ///   * true - Do consider all available traffic information during routing
    ///   * false - Ignore current traffic data during routing. Note that although the current traffic data is ignored
    ///   during routing, the effect of historic traffic on effective road speeds is still incorporated.
    ///   - avoid: Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times in one request, for example, '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the value alreadyUsedRoads must not be used.
    ///   - travelMode: The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
    ///   - inclineLevel: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
    ///   - windingness: Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
    ///   - vehicleAxleWeight: Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.
    ///   - vehicleWidth: Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.
    ///   - vehicleHeight: Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.
    ///   - vehicleLength: Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.
    ///   - vehicleMaxSpeed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle profile is used to check whether a vehicle is allowed on motorways.
    /// * A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning.
    /// * A non-zero value may be overridden during route planning. For example, the current traffic flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will again use 60 km/hour.
    ///   - vehicleWeight: Weight of the vehicle in kilograms.
    /// * It is mandatory if any of the *Efficiency parameters are set.
    /// * It must be strictly positive when used in the context of the Consumption Model. Weight restrictions are considered.
    /// * If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-zero, then weight restrictions are considered.
    /// * In all other cases, this parameter is ignored.
    /// Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900
    ///   - isCommercialVehicle: Whether the vehicle is used for commercial purposes. Commercial vehicles may not be allowed to drive on some roads.
    ///   - vehicleLoadType: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
    ///   - vehicleEngineType: Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.
    ///   - constantSpeedConsumptionInLitersPerHundredKm: Specifies the speed-dependent component of consumption.
    /// Provided as an unordered list of colon-delimited speed & consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:
    ///  * by linear interpolation, if the given speed lies in between two speeds in the list
    ///  * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list
    /// The list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.
    /// Consumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.
    /// Similarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller speed.
    /// The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.
    /// Sensible Values : 50,6.3:130,11.5
    /// **Note** : This parameter is required for **The Combustion Consumption Model**.
    ///   - currentFuelInLiters: Specifies the current supply of fuel in liters.
    /// Sensible Values : 55
    ///   - auxiliaryPowerInLitersPerHour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
    /// It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.
    /// Sensible Values : 0.2
    ///   - fuelEnergyDensityInMegajoulesPerLiter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.
    /// This parameter is required if any ***Efficiency** parameter is set.
    /// Sensible Values : 34.2
    ///   - accelerationEfficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates _(i.e. KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **decelerationEfficiency**.
    /// The range of values allowed are 0.0 to 1/**decelerationEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66
    ///   - decelerationEfficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates _(i.e. ChemicalEnergySaved/KineticEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **accelerationEfficiency**.
    /// The range of values allowed are 0.0 to 1/**accelerationEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91
    ///   - uphillEfficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation _(i.e. PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **downhillEfficiency**.
    /// The range of values allowed are 0.0 to 1/**downhillEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74
    ///   - downhillEfficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation _(i.e. ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.
    /// Must be paired with **uphillEfficiency**.
    /// The range of values allowed are 0.0 to 1/**uphillEfficiency**.
    /// Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73
    ///   - constantSpeedConsumptionInKwHPerHundredKm: Specifies the speed-dependent component of consumption.
    /// Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:
    /// * by linear interpolation, if the given speed lies in between two speeds in the list
    /// * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list
    /// The list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.
    /// Consumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.
    /// Similarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller  speed.
    /// The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and 100000.0.
    /// Sensible Values : 50,8.2:130,21.3
    /// This parameter is required for **Electric consumption model**.
    ///   - currentChargeInKwH: Specifies the current electric energy supply in kilowatt hours (kWh).
    /// This parameter co-exists with **maxChargeInkWh** parameter.
    /// The range of values allowed are 0.0 to **maxChargeInkWh**.
    /// Sensible Values : 43
    ///   - maxChargeInKwH: Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.
    /// This parameter co-exists with **currentChargeInkWh** parameter.
    /// Minimum value has to be greater than or equal to **currentChargeInkWh**.
    /// Sensible Values : 85
    ///   - auxiliaryPowerInKw: Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts (kW).
    /// It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.
    /// Sensible Values : 1.7
    ///   - clientRequestId: A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    ///   - cancellationToken: A token used to make a best-effort attempt at canceling a request.
    ///   - dispatchQueue: A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    ///   - context: A `PipelineContext` object to associate with the request.
    public init(
        fuelBudgetInLiters: Double? = nil,
        energyBudgetInKwH: Double? = nil,
        timeBudgetInSec: Double? = nil,
        distanceBudgetInMeters: Double? = nil,
        departAt: Iso8601Date? = nil,
        routeType: RouteType? = nil,
        useTrafficData: Bool? = nil,
        avoid: [RouteAvoidType]? = nil,
        travelMode: TravelMode? = nil,
        inclineLevel: InclineLevel? = nil,
        windingness: WindingnessLevel? = nil,
        vehicleAxleWeight: Int32? = nil,
        vehicleWidth: Double? = nil,
        vehicleHeight: Double? = nil,
        vehicleLength: Double? = nil,
        vehicleMaxSpeed: Int32? = nil,
        vehicleWeight: Int32? = nil,
        isCommercialVehicle: Bool? = nil,
        vehicleLoadType: VehicleLoadType? = nil,
        vehicleEngineType: VehicleEngineType? = nil,
        constantSpeedConsumptionInLitersPerHundredKm: String? = nil,
        currentFuelInLiters: Double? = nil,
        auxiliaryPowerInLitersPerHour: Double? = nil,
        fuelEnergyDensityInMegajoulesPerLiter: Double? = nil,
        accelerationEfficiency: Double? = nil,
        decelerationEfficiency: Double? = nil,
        uphillEfficiency: Double? = nil,
        downhillEfficiency: Double? = nil,
        constantSpeedConsumptionInKwHPerHundredKm: String? = nil,
        currentChargeInKwH: Double? = nil,
        maxChargeInKwH: Double? = nil,
        auxiliaryPowerInKw: Double? = nil,
        clientRequestId: String? = nil,
        cancellationToken: CancellationToken? = nil,
        dispatchQueue: DispatchQueue? = nil,
        context: PipelineContext? = nil
    ) {
        self.fuelBudgetInLiters = fuelBudgetInLiters
        self.energyBudgetInKwH = energyBudgetInKwH
        self.timeBudgetInSec = timeBudgetInSec
        self.distanceBudgetInMeters = distanceBudgetInMeters
        self.departAt = departAt
        self.routeType = routeType
        self.useTrafficData = useTrafficData
        self.avoid = avoid
        self.travelMode = travelMode
        self.inclineLevel = inclineLevel
        self.windingness = windingness
        self.vehicleAxleWeight = vehicleAxleWeight
        self.vehicleWidth = vehicleWidth
        self.vehicleHeight = vehicleHeight
        self.vehicleLength = vehicleLength
        self.vehicleMaxSpeed = vehicleMaxSpeed
        self.vehicleWeight = vehicleWeight
        self.isCommercialVehicle = isCommercialVehicle
        self.vehicleLoadType = vehicleLoadType
        self.vehicleEngineType = vehicleEngineType
        self.constantSpeedConsumptionInLitersPerHundredKm = constantSpeedConsumptionInLitersPerHundredKm
        self.currentFuelInLiters = currentFuelInLiters
        self.auxiliaryPowerInLitersPerHour = auxiliaryPowerInLitersPerHour
        self.fuelEnergyDensityInMegajoulesPerLiter = fuelEnergyDensityInMegajoulesPerLiter
        self.accelerationEfficiency = accelerationEfficiency
        self.decelerationEfficiency = decelerationEfficiency
        self.uphillEfficiency = uphillEfficiency
        self.downhillEfficiency = downhillEfficiency
        self.constantSpeedConsumptionInKwHPerHundredKm = constantSpeedConsumptionInKwHPerHundredKm
        self.currentChargeInKwH = currentChargeInKwH
        self.maxChargeInKwH = maxChargeInKwH
        self.auxiliaryPowerInKw = auxiliaryPowerInKw
        self.clientRequestId = clientRequestId
        self.cancellationToken = cancellationToken
        self.dispatchQueue = dispatchQueue
        self.context = context
    }
}
