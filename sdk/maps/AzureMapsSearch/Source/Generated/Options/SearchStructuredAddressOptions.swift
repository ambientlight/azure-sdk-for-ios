// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length

/// User-configurable options for the `SearchStructuredAddress` operation.
public struct SearchStructuredAddressOptions: RequestOptions {
    /// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
    /// Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
    public let language: String?
    /// The 2 or 3 letter [ISO3166-1](https://www.iso.org/iso-3166-country-codes.html) country code portion of an address. E.g. US.
    public let countryCode: String?
    /// Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100
    public let top: Int32?
    /// Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900
    public let skip: Int32?
    /// The street number portion of an address
    public let streetNumber: String?
    /// The street name portion of an address
    public let streetName: String?
    /// The cross street name for the structured address
    public let crossStreet: String?
    /// The municipality portion of an address
    public let municipality: String?
    /// The municipality subdivision (sub/super city) for the structured address
    public let municipalitySubdivision: String?
    /// The named area for the structured address
    public let countryTertiarySubdivision: String?
    /// The county for the structured address
    public let countrySecondarySubdivision: String?
    /// The country subdivision portion of an address
    public let countrySubdivision: String?
    /// The postal code portion of an address
    public let postalCode: String?
    /// Indexes for which extended postal codes should be included in the results.
    /// Available indexes are:
    ///  **Addr** = Address ranges
    ///  **Geo** = Geographies
    ///  **PAD** = Point Addresses
    ///  **POI** = Points of Interest
    ///  **Str** = Streets
    ///  **XStr** = Cross Streets (intersections)
    /// Value should be a comma separated list of index types (in any order) or **None** for no indexes.
    /// By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
    /// Usage examples:
    ///  extendedPostalCodesFor=POI
    ///  extendedPostalCodesFor=PAD,Addr,POI
    ///  extendedPostalCodesFor=None
    /// Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
    public let extendedPostalCodesFor: [SearchIndexes]?
    /// Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
    /// * heading
    /// * number
    /// * returnRoadUse
    /// * returnSpeedLimit
    /// * roadUse
    /// * returnMatchType
    public let entityType: GeographicEntityType?
    /// The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
    /// Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
    public let localizedMapView: LocalizedMapView?

    /// A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    /// Highly recommended for correlating client-side activites with requests received by the server.
    public let clientRequestId: String?

    /// A token used to make a best-effort attempt at canceling a request.
    public let cancellationToken: CancellationToken?

    /// A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    public var dispatchQueue: DispatchQueue?

    /// A `PipelineContext` object to associate with the request.
    public var context: PipelineContext?

    /// Initialize a `SearchStructuredAddressOptions` structure.
    /// - Parameters:
    ///   - language: Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
    /// Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
    ///   - countryCode: The 2 or 3 letter [ISO3166-1](https://www.iso.org/iso-3166-country-codes.html) country code portion of an address. E.g. US.
    ///   - top: Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100
    ///   - skip: Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900
    ///   - streetNumber: The street number portion of an address
    ///   - streetName: The street name portion of an address
    ///   - crossStreet: The cross street name for the structured address
    ///   - municipality: The municipality portion of an address
    ///   - municipalitySubdivision: The municipality subdivision (sub/super city) for the structured address
    ///   - countryTertiarySubdivision: The named area for the structured address
    ///   - countrySecondarySubdivision: The county for the structured address
    ///   - countrySubdivision: The country subdivision portion of an address
    ///   - postalCode: The postal code portion of an address
    ///   - extendedPostalCodesFor: Indexes for which extended postal codes should be included in the results.
    /// Available indexes are:
    ///  **Addr** = Address ranges
    ///  **Geo** = Geographies
    ///  **PAD** = Point Addresses
    ///  **POI** = Points of Interest
    ///  **Str** = Streets
    ///  **XStr** = Cross Streets (intersections)
    /// Value should be a comma separated list of index types (in any order) or **None** for no indexes.
    /// By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
    /// Usage examples:
    ///  extendedPostalCodesFor=POI
    ///  extendedPostalCodesFor=PAD,Addr,POI
    ///  extendedPostalCodesFor=None
    /// Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
    ///   - entityType: Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
    /// * heading
    /// * number
    /// * returnRoadUse
    /// * returnSpeedLimit
    /// * roadUse
    /// * returnMatchType
    ///   - localizedMapView: The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
    /// Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
    ///   - clientRequestId: A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    ///   - cancellationToken: A token used to make a best-effort attempt at canceling a request.
    ///   - dispatchQueue: A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    ///   - context: A `PipelineContext` object to associate with the request.
    public init(
        language: String? = nil,
        countryCode: String? = nil,
        top: Int32? = nil,
        skip: Int32? = nil,
        streetNumber: String? = nil,
        streetName: String? = nil,
        crossStreet: String? = nil,
        municipality: String? = nil,
        municipalitySubdivision: String? = nil,
        countryTertiarySubdivision: String? = nil,
        countrySecondarySubdivision: String? = nil,
        countrySubdivision: String? = nil,
        postalCode: String? = nil,
        extendedPostalCodesFor: [SearchIndexes]? = nil,
        entityType: GeographicEntityType? = nil,
        localizedMapView: LocalizedMapView? = nil,
        clientRequestId: String? = nil,
        cancellationToken: CancellationToken? = nil,
        dispatchQueue: DispatchQueue? = nil,
        context: PipelineContext? = nil
    ) {
        self.language = language
        self.countryCode = countryCode
        self.top = top
        self.skip = skip
        self.streetNumber = streetNumber
        self.streetName = streetName
        self.crossStreet = crossStreet
        self.municipality = municipality
        self.municipalitySubdivision = municipalitySubdivision
        self.countryTertiarySubdivision = countryTertiarySubdivision
        self.countrySecondarySubdivision = countrySecondarySubdivision
        self.countrySubdivision = countrySubdivision
        self.postalCode = postalCode
        self.extendedPostalCodesFor = extendedPostalCodesFor
        self.entityType = entityType
        self.localizedMapView = localizedMapView
        self.clientRequestId = clientRequestId
        self.cancellationToken = cancellationToken
        self.dispatchQueue = dispatchQueue
        self.context = context
    }
}
