// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length

/// User-configurable options for the `SearchAddress` operation.
public struct SearchAddressOptions: RequestOptions {
    /// Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode
    public let isTypeAhead: Bool?
    /// Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100
    public let top: Int32?
    /// Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900
    public let skip: Int32?
    /// Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries
    public let countryFilter: [String]?
    /// Latitude where results should be biased. E.g. 37.337
    public let lat: Double?
    /// Longitude where results should be biased. E.g. -121.89
    public let lon: Double?
    /// The radius in meters to for the results to be constrained to the defined area
    public let radiusInMeters: Int32?
    /// Top left position of the bounding box. E.g. 37.553,-122.453
    public let topLeft: String?
    /// Bottom right position of the bounding box. E.g. 37.553,-122.453
    public let btmRight: String?
    /// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
    /// Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
    public let language: String?
    /// Indexes for which extended postal codes should be included in the results.
    /// Available indexes are:
    ///  **Addr** = Address ranges
    ///  **Geo** = Geographies
    ///  **PAD** = Point Addresses
    ///  **POI** = Points of Interest
    ///  **Str** = Streets
    ///  **XStr** = Cross Streets (intersections)
    /// Value should be a comma separated list of index types (in any order) or **None** for no indexes.
    /// By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
    /// Usage examples:
    ///  extendedPostalCodesFor=POI
    ///  extendedPostalCodesFor=PAD,Addr,POI
    ///  extendedPostalCodesFor=None
    /// Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
    public let extendedPostalCodesFor: [SearchIndexes]?
    /// Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
    /// * heading
    /// * number
    /// * returnRoadUse
    /// * returnSpeedLimit
    /// * roadUse
    /// * returnMatchType
    public let entityType: GeographicEntityType?
    /// The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
    /// Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
    public let localizedMapView: LocalizedMapView?

    /// A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    /// Highly recommended for correlating client-side activites with requests received by the server.
    public let clientRequestId: String?

    /// A token used to make a best-effort attempt at canceling a request.
    public let cancellationToken: CancellationToken?

    /// A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    public var dispatchQueue: DispatchQueue?

    /// A `PipelineContext` object to associate with the request.
    public var context: PipelineContext?

    /// Initialize a `SearchAddressOptions` structure.
    /// - Parameters:
    ///   - isTypeAhead: Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode
    ///   - top: Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100
    ///   - skip: Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900
    ///   - countryFilter: Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries
    ///   - lat: Latitude where results should be biased. E.g. 37.337
    ///   - lon: Longitude where results should be biased. E.g. -121.89
    ///   - radiusInMeters: The radius in meters to for the results to be constrained to the defined area
    ///   - topLeft: Top left position of the bounding box. E.g. 37.553,-122.453
    ///   - btmRight: Bottom right position of the bounding box. E.g. 37.553,-122.453
    ///   - language: Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
    /// Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
    ///   - extendedPostalCodesFor: Indexes for which extended postal codes should be included in the results.
    /// Available indexes are:
    ///  **Addr** = Address ranges
    ///  **Geo** = Geographies
    ///  **PAD** = Point Addresses
    ///  **POI** = Points of Interest
    ///  **Str** = Streets
    ///  **XStr** = Cross Streets (intersections)
    /// Value should be a comma separated list of index types (in any order) or **None** for no indexes.
    /// By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
    /// Usage examples:
    ///  extendedPostalCodesFor=POI
    ///  extendedPostalCodesFor=PAD,Addr,POI
    ///  extendedPostalCodesFor=None
    /// Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
    ///   - entityType: Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
    /// * heading
    /// * number
    /// * returnRoadUse
    /// * returnSpeedLimit
    /// * roadUse
    /// * returnMatchType
    ///   - localizedMapView: The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
    /// Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
    ///   - clientRequestId: A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    ///   - cancellationToken: A token used to make a best-effort attempt at canceling a request.
    ///   - dispatchQueue: A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    ///   - context: A `PipelineContext` object to associate with the request.
    public init(
        isTypeAhead: Bool? = nil,
        top: Int32? = nil,
        skip: Int32? = nil,
        countryFilter: [String]? = nil,
        lat: Double? = nil,
        lon: Double? = nil,
        radiusInMeters: Int32? = nil,
        topLeft: String? = nil,
        btmRight: String? = nil,
        language: String? = nil,
        extendedPostalCodesFor: [SearchIndexes]? = nil,
        entityType: GeographicEntityType? = nil,
        localizedMapView: LocalizedMapView? = nil,
        clientRequestId: String? = nil,
        cancellationToken: CancellationToken? = nil,
        dispatchQueue: DispatchQueue? = nil,
        context: PipelineContext? = nil
    ) {
        self.isTypeAhead = isTypeAhead
        self.top = top
        self.skip = skip
        self.countryFilter = countryFilter
        self.lat = lat
        self.lon = lon
        self.radiusInMeters = radiusInMeters
        self.topLeft = topLeft
        self.btmRight = btmRight
        self.language = language
        self.extendedPostalCodesFor = extendedPostalCodesFor
        self.entityType = entityType
        self.localizedMapView = localizedMapView
        self.clientRequestId = clientRequestId
        self.cancellationToken = cancellationToken
        self.dispatchQueue = dispatchQueue
        self.context = context
    }
}
