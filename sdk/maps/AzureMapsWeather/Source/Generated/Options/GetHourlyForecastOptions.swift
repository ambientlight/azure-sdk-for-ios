// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length

/// User-configurable options for the `GetHourlyForecast` operation.
public struct GetHourlyForecastOptions: RequestOptions {
    /// Specifies to return the data in either metric units or imperial units. Default value is metric.
    public let unit: WeatherDataUnit?
    /// Time frame of the returned weather forecast. By default, the forecast data for next hour will be returned. Available values are
    ///   * `1` - Return forecast data for the next hour. Default value.
    ///   * `12` - Return hourly forecast for next 12 hours.
    ///   * `24` - Return hourly forecast for next 24 hours.
    ///   * `72` - Return hourly forecast for next 72 hours (3 days).
    ///   * `120` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.
    ///   * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
    public let duration: Int32?
    /// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
    /// Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
    public let language: String?

    /// A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    /// Highly recommended for correlating client-side activites with requests received by the server.
    public let clientRequestId: String?

    /// A token used to make a best-effort attempt at canceling a request.
    public let cancellationToken: CancellationToken?

    /// A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    public var dispatchQueue: DispatchQueue?

    /// A `PipelineContext` object to associate with the request.
    public var context: PipelineContext?

    /// Initialize a `GetHourlyForecastOptions` structure.
    /// - Parameters:
    ///   - unit: Specifies to return the data in either metric units or imperial units. Default value is metric.
    ///   - duration: Time frame of the returned weather forecast. By default, the forecast data for next hour will be returned. Available values are
    ///   * `1` - Return forecast data for the next hour. Default value.
    ///   * `12` - Return hourly forecast for next 12 hours.
    ///   * `24` - Return hourly forecast for next 24 hours.
    ///   * `72` - Return hourly forecast for next 72 hours (3 days).
    ///   * `120` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.
    ///   * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
    ///   - language: Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
    /// Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
    ///   - clientRequestId: A client-generated, opaque value with 1KB character limit that is recorded in analytics logs.
    ///   - cancellationToken: A token used to make a best-effort attempt at canceling a request.
    ///   - dispatchQueue: A dispatch queue on which to call the completion handler. Defaults to `DispatchQueue.main`.
    ///   - context: A `PipelineContext` object to associate with the request.
    public init(
        unit: WeatherDataUnit? = nil,
        duration: Int32? = nil,
        language: String? = nil,
        clientRequestId: String? = nil,
        cancellationToken: CancellationToken? = nil,
        dispatchQueue: DispatchQueue? = nil,
        context: PipelineContext? = nil
    ) {
        self.unit = unit
        self.duration = duration
        self.language = language
        self.clientRequestId = clientRequestId
        self.cancellationToken = cancellationToken
        self.dispatchQueue = dispatchQueue
        self.context = context
    }
}
